# Change the filename to: .gitlab-ci.yml
#
# The following template uses LabraNet's runner that has a Docker executor

# Define a pipeline stages
stages:
  - test
  - build
  - deploy

# Execute a unit tests. This stage should be working out of the box.
# You can test the outcome by changing the values by changing the "test_pointless_function" values in tests.py file
unit_test:
  stage: test
  image: python:3.6
  script:
    - pip install xmlrunner
    - python ./src/tests.py
  tags:
    - msd
  artifacts:
    when: always
    paths:
      - test-reports/TEST-*.xml

# Build a docker image, using the teachers GitLab runner (general runner is unable to use docker commands)
# Add teacher to your project (as a maintainer) and send a Teams message so he can enable runner for you!
build:
  stage: build
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE .
    - docker push $CI_REGISTRY_IMAGE
  tags:
  - msd

# In here, you want to deploy a container to Kubernetes.
# Create a new kubernetes cluster by hand or via api, up to you. Note that examples are not made for autopilot, so you may want to use standard!!!

#deploy:
#  stage: deploy
#  image: # some base image what will be used during this stage (hint: there is a official sdk image available)
#  before_script:
    # perhaps you want to install kubectl in this section
    #
#  script:
    # you must configure and authenticate using CLI commands (no browser available)
    # The following lines are only used to configure/auth cgloud (note the Google service account is used with a GitLab project secret variables!)
    # create a new service account as a owner, no need to specify permissions
    # also enable resourcec management api manually: https://console.developers.google.com/apis/api/cloudresourcemanager.googleapis.com/overview
    #
    # - echo $GCP_SERVICE_KEY > $HOME/servicekey.json #service account json file is defined in secret variable and echoed inside the runner container
    # - gcloud config configurations create exampleconf
    # - gcloud auth activate-service-account --key-file $HOME/servicekey.json
    # - rm ${HOME}/servicekey.json
    # - gcloud config set project $GCP_PROJECT_ID
    # - gcloud container clusters get-credentials $KUBERNETES_CLUSTER_NAME --zone europe-north1-c
    #
    # simple tests at this point to ensure that is everything working
    # - gcloud container clusters list
    # - kubectl get nodes
    #
    # Authenticate to JAMK's GitLab (by creating a new secret in your Kubernetes environment, only needed once)
    # The following line uses gitlab variables and manually created user access token in gitlab (setup as secret variable)
    # kubectl create secret docker-registry jamkgitlab --docker-server=gitlab.labranet.jamk.fi:4567 --docker-username=$GITLAB_USER_LOGIN --docker-password=$GITLAB_TOKEN --docker-email=$GITLAB_USER_EMAIL
    #
    # how to apply a new service&deployment?
    #
#  when: manual
#  allow_failure: false
#  only:
#    - master
#  tags:
#  - msd

